import os
import discord
from discord.ext import commands
from dotenv import load_dotenv
import keep_alive  # Optional: only needed if you're using keep_alive.py

# Load environment variables
load_dotenv()
TOKEN = os.getenv("DISCORD_BOT_TOKEN")

# Intents
intents = discord.Intents.default()
intents.message_content = True
intents.messages = True

bot = commands.Bot(command_prefix="!", intents=intents)

# Config
BANNED_WORDS = {"slur1", "slur2", "slur3"}  # Replace with actual slurs (lowercase)
VIOLATION_TEXT = "This Message Is in Violation of Rule 1"
LOG_CHANNEL_NAME = "logs"

def contains_banned_word(content: str) -> bool:
    return any(word in content.lower() for word in BANNED_WORDS)

async def log_violation(author: discord.User, original: str, guild: discord.Guild):
    log_channel = discord.utils.get(guild.text_channels, name=LOG_CHANNEL_NAME)
    if log_channel:
        await log_channel.send(
            f"ðŸš¨ Violation by {author.mention}\n"
            f"Original message: ```{original}```"
        )

@bot.event
async def on_ready():
    print(f"âœ… Logged in as {bot.user} (ID: {bot.user.id})")

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot:
        return

    if contains_banned_word(message.content):
        try:
            await message.edit(content=VIOLATION_TEXT)
            await log_violation(message.author, message.content, message.guild)
        except discord.Forbidden:
            await message.channel.send(f"{message.author.mention}, your message violated Rule 1.")
    else:
        await bot.process_commands(message)

@bot.event
async def on_message_edit(before: discord.Message, after: discord.Message):
    if after.author.bot:
        return

    if contains_banned_word(after.content):
        try:
            await after.edit(content=VIOLATION_TEXT)
            await log_violation(after.author, after.content, after.guild)
        except discord.Forbidden:
            await after.channel.send(f"{after.author.mention}, edited message still violates Rule 1.")

# Optional: keep_alive for Replit or similar
keep_alive.keep_alive()

# Run the bot
bot.run(os.getenv("DISCORD_BOT_TOKEN"))
